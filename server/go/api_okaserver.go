/*
 * openapi server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// OkaserverAPIController binds http requests to an api service and writes the service results to the http response
type OkaserverAPIController struct {
	service OkaserverAPIServicer
	errorHandler ErrorHandler
}

// OkaserverAPIOption for how the controller is set up.
type OkaserverAPIOption func(*OkaserverAPIController)

// WithOkaserverAPIErrorHandler inject ErrorHandler into controller
func WithOkaserverAPIErrorHandler(h ErrorHandler) OkaserverAPIOption {
	return func(c *OkaserverAPIController) {
		c.errorHandler = h
	}
}

// NewOkaserverAPIController creates a default api controller
func NewOkaserverAPIController(s OkaserverAPIServicer, opts ...OkaserverAPIOption) Router {
	controller := &OkaserverAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OkaserverAPIController
func (c *OkaserverAPIController) Routes() Routes {
	return Routes{
		"Getokainfo": Route{
			strings.ToUpper("Get"),
			"/okaserver",
			c.Getokainfo,
		},
	}
}

// Getokainfo - get oka info
func (c *OkaserverAPIController) Getokainfo(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.Getokainfo(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
